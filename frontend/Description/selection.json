{
    "name": "Selection Sort",
    "description": "Selection Sort is a comparison-based sorting algorithm that divides the list into a sorted and an unsorted region. It repeatedly selects the smallest (or largest) element from the unsorted region and moves it to the sorted region.",
    "steps": [
      "Step 1: Start with the first element as the initial minimum.",
      "Step 2: Compare the initial minimum with all other elements in the unsorted portion of the array.",
      "Step 3: If a smaller element is found, update the minimum index.",
      "Step 4: Swap the minimum element found with the first element of the unsorted region.",
      "Step 5: Move the boundary between sorted and unsorted regions one step forward.",
      "Step 6: Repeat the process until the entire array is sorted."
    ],
    "usage": [
      "Usage 1: Used when memory write operations are expensive, as it minimizes the number of swaps.",
      "Usage 2: Suitable for small datasets or when a simple implementation is sufficient."
    ],
    "complexity": {
      "time": "O(n^2) in the worst, average, and best cases due to the nested loops.",
      "space": "O(1), as it is an in-place sorting algorithm."
    },
    "related_concepts": [
      "Bubble Sort: Another simple comparison-based sorting algorithm.",
      "Insertion Sort: A sorting algorithm with similar complexity but better performance on nearly sorted data.",
      "Heap Sort: A more efficient sorting algorithm for larger datasets."
    ],
    "interesting_facts": [
      "Fact 1: Selection Sort performs the same number of comparisons regardless of the initial arrangement of the elements.",
      "Fact 2: It is not a stable sort, as the relative order of equal elements may change during swapping."
    ]
  }
  